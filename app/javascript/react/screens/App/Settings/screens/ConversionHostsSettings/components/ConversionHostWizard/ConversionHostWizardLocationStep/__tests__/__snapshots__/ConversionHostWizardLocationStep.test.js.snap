// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`conversion host wizard location step renders correctly in the initial state with both providers present 1`] = `
<Connect(Form(ConversionHostWizardLocationStep))
  _reduxForm={null}
  destroyOnUnmount={false}
  enableReinitialize={false}
  fetchTargetClustersAction={[MockFunction]}
  fetchTargetComputeUrls={
    Object {
      "openstack": "/api/mock/openstack/compute",
      "rhevm": "/api/mock/rhv/compute",
    }
  }
  forceUnregisterOnUnmount={false}
  form="conversionHostWizardLocationStep"
  getFormState={[Function]}
  isFetchingTargetClusters={false}
  keepDirtyOnReinitialize={false}
  persistentSubmitErrors={false}
  providers={
    Array [
      Object {
        "id": "1",
        "name": "Mock RHV",
        "type": "ManageIQ::Providers::Redhat::InfraManager",
      },
      Object {
        "id": "2",
        "name": "Mock OSP",
        "type": "ManageIQ::Providers::Openstack::CloudManager",
      },
    ]
  }
  pure={true}
  resetFormAction={[MockFunction]}
  selectedProviderId={null}
  selectedProviderType={null}
  shouldAsyncValidate={[Function]}
  shouldError={[Function]}
  shouldValidate={[Function]}
  shouldWarn={[Function]}
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
  submitAsSideEffect={false}
  targetClusters={Array []}
  touchOnBlur={true}
  touchOnChange={false}
  updateUnregisteredFields={false}
/>
`;

exports[`conversion host wizard location step renders correctly in the initial state with only RHV providers present 1`] = `
<Connect(Form(ConversionHostWizardLocationStep))
  _reduxForm={null}
  destroyOnUnmount={false}
  enableReinitialize={false}
  fetchTargetClustersAction={[MockFunction]}
  fetchTargetComputeUrls={
    Object {
      "openstack": "/api/mock/openstack/compute",
      "rhevm": "/api/mock/rhv/compute",
    }
  }
  forceUnregisterOnUnmount={false}
  form="conversionHostWizardLocationStep"
  getFormState={[Function]}
  isFetchingTargetClusters={false}
  keepDirtyOnReinitialize={false}
  persistentSubmitErrors={false}
  providers={
    Array [
      Object {
        "id": "1",
        "name": "Mock RHV",
        "type": "ManageIQ::Providers::Redhat::InfraManager",
      },
    ]
  }
  pure={true}
  resetFormAction={[MockFunction]}
  selectedProviderId={null}
  selectedProviderType={null}
  shouldAsyncValidate={[Function]}
  shouldError={[Function]}
  shouldValidate={[Function]}
  shouldWarn={[Function]}
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
  submitAsSideEffect={false}
  targetClusters={Array []}
  touchOnBlur={true}
  touchOnChange={false}
  updateUnregisteredFields={false}
/>
`;

exports[`conversion host wizard location step renders the redux-form wrapper correctly 1`] = `
<Hoc
  destroyOnUnmount={false}
  enableReinitialize={false}
  fetchTargetClustersAction={[MockFunction]}
  fetchTargetComputeUrls={
    Object {
      "openstack": "/api/mock/openstack/compute",
      "rhevm": "/api/mock/rhv/compute",
    }
  }
  forceUnregisterOnUnmount={false}
  form="conversionHostWizardLocationStep"
  forwardedRef={null}
  getFormState={[Function]}
  isFetchingTargetClusters={false}
  keepDirtyOnReinitialize={false}
  persistentSubmitErrors={false}
  providers={
    Array [
      Object {
        "id": "1",
        "name": "Mock RHV",
        "type": "ManageIQ::Providers::Redhat::InfraManager",
      },
      Object {
        "id": "2",
        "name": "Mock OSP",
        "type": "ManageIQ::Providers::Openstack::CloudManager",
      },
    ]
  }
  pure={true}
  resetFormAction={[MockFunction]}
  selectedProviderId={null}
  selectedProviderType={null}
  shouldAsyncValidate={[Function]}
  shouldError={[Function]}
  shouldValidate={[Function]}
  shouldWarn={[Function]}
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
  submitAsSideEffect={false}
  targetClusters={Array []}
  touchOnBlur={true}
  touchOnChange={false}
  updateUnregisteredFields={false}
/>
`;
