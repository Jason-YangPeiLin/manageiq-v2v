// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`retry conversion host confirmation modal renders the redux-form wrapper correctly 1`] = `
<Hoc
  conversionHostRetryModalExitedAction={[MockFunction]}
  conversionHostTaskToRetry={
    Object {
      "context_data": Object {
        "request_params": Object {
          "mock": "params",
          "vmware_vddk_package_url": "mock vddk path",
        },
      },
      "name": "Mock Host",
    }
  }
  destroyOnUnmount={true}
  enableReinitialize={false}
  forceUnregisterOnUnmount={false}
  form="retryConversionHost"
  forwardedRef={null}
  getFormState={[Function]}
  hideConversionHostRetryModalAction={[MockFunction]}
  initialValues={
    Object {
      "conversionHostSshKey": Object {
        "body": "",
        "filename": "",
      },
      "vmwareSshKey": Object {
        "body": "",
        "filename": "",
      },
    }
  }
  isPostingConversionHosts={false}
  keepDirtyOnReinitialize={false}
  persistentSubmitErrors={false}
  postConversionHostsAction={[MockFunction]}
  postConversionHostsUrl="/api/mock/conversion_hosts"
  pure={true}
  retryForm={
    Object {
      "values": Object {
        "conversionHostSshKey": Object {
          "body": "mock conversion host key",
        },
      },
    }
  }
  shouldAsyncValidate={[Function]}
  shouldError={[Function]}
  shouldValidate={[Function]}
  shouldWarn={[Function]}
  show={true}
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
  submitAsSideEffect={false}
  touchOnBlur={true}
  touchOnChange={false}
  updateUnregisteredFields={false}
/>
`;
